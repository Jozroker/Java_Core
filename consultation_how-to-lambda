
public class Comodity implements Comparable<Comodity>{

	private int price;
	private String brandName;
	private String name;
	private int weight;

	Comodity() {}

	public Comodity(int price, String brandName, String name, int weight) {
		this.price = price;
		this.brandName = brandName;
		this.name = name;
		this.weight = weight;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	public String getBrandName() {
		return brandName;
	}

	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getWeight() {
		return weight;
	}

	public void setWeight(int weight) {
		this.weight = weight;
	}
  
	@Override
	public String toString() {
		return "Comodity [price=" + price + ", brandName=" + brandName + ", name=" + name + ", weight=" + weight + "]";
	}

	@Override
	public int compareTo(Comodity o) {
		return this.name.compareTo(o.getName());
	}
}



@FunctionalInterface
public interface ComodityFactory {
	Comodity createComodity(int price, String brandName, String name, int weight); 
}



public class Application {
	public static void main(String[] args) {

		List<Comodity> list = new ArrayList<>();

		ComodityFactory factory = Comodity::new;
		Comodity comodity1 = factory.createComodity(22, "Adidas", "wallet", 200);
		Comodity comodity2 = factory.createComodity(17, "Nike", "sockets", 12673);
		Comodity comodity3 = factory.createComodity(1698, "Nike", "tshirt", 48);
		Comodity comodity4 = factory.createComodity(87, "Reebok", "shirt", 9384);
		Comodity comodity5 = factory.createComodity(32, "Limo", "bracelet", 223);
		Comodity comodity6 = factory.createComodity(387, "Duru", "hat", 12);

		list.add(comodity1);
		list.add(comodity2);
		list.add(comodity3);
		list.add(comodity4);
		list.add(comodity5);
		list.add(comodity6);

		Consumer<Comodity> addLambda = comodity -> list.add(comodity);
		addLambda.accept(new Comodity(2344555, "jdhfkjsd", "uwyuiwefu", 1233));

		List<Comodity> collects = list.stream().sorted().collect(Collectors.toList());
		collects.forEach(System.out::println);

		Comparator<Comodity> sortByPrice = (c1, c2) -> (c1.getPrice() > c2.getPrice()) ? 1 : -1;
		collects = list.stream().sorted(sortByPrice).collect(Collectors.toList());
		collects.forEach(System.out::println);

		Comparator<Comodity> sortByBrandsNameAndWeight = (c1, c2) -> {
			if (c1.getBrandName().compareTo(c2.getBrandName()) != 0) {
				return c1.getBrandName().compareTo(c2.getBrandName());
			} else if (c1.getWeight() > c2.getWeight()) {
				return 1;
			} else if (c1.getWeight() < c2.getWeight()) {
				return -1;
			}

			return 0;
		};

		collects = list.stream().sorted(sortByBrandsNameAndWeight).collect(Collectors.toList());
		collects.forEach(System.out::println);

		collects.forEach(System.out::println);
		System.out.println();

		Supplier<Comodity> createComodity = () -> {
			Scanner sc = new Scanner(System.in);
			System.out.println("price =");
			String price = sc.next();
			System.out.println("brandName =");
			String brandName = sc.next();
			System.out.println("name =");
			String name = sc.next();
			System.out.println("name =");
			String weight = sc.next();

			return new Comodity(Integer.parseInt(price), brandName, name, Integer.parseInt(weight));
		};

		addLambda.accept(createComodity.get());
		addLambda.accept(createComodity.get());
		list.forEach(System.out::println);

		Function<Scanner, Comodity> generateComodity = scan -> {
			System.out.println("price =");
			String price = scan.next();
			System.out.println("brandName =");
			String brandName = scan.next();
			System.out.println("name =");
			String name = scan.next();
			System.out.println("name =");
			String weight = scan.next();

			return new Comodity(Integer.parseInt(price), brandName, name, Integer.parseInt(weight));
		};

		Scanner sc = new Scanner(System.in);
		addLambda.accept(generateComodity.apply(sc));
		addLambda.accept(generateComodity.apply(sc));
		sc.close();

		list.forEach(System.out::println);

	}
}

